// Type definitions for non-npm package Cloud Firestore API v1 1.0
// Project: https://cloud.google.com/firestore
// Definitions by: Maxim Mazurok <https://github.com/Maxim-Mazurok>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 2.8

// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
// Generated from: https://firestore.googleapis.com/\$discovery/rest?version=v1
// Revision: 20200405
/// <reference types="gapi.client" />

declare namespace gapi.client {
  /** Load Cloud Firestore API v1 */
  function load(name: 'firestore', version: 'v1'): PromiseLike<void>;
  function load(name: 'firestore', version: 'v1', callback: () => any): void;

  export namespace firestore {
    interface ArrayValue {
      /** Values in the array. */
      values?: Value[];
    }
    interface BatchGetDocumentsRequest {
      /**
       * The names of the documents to retrieve. In the format:
       * `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
       * The request will fail if any of the document is not a child resource of the
       * given `database`. Duplicate names will be elided.
       */
      documents?: string[];
      /**
       * The fields to return. If not set, returns all fields.
       *
       * If a document has a field that is not present in this mask, that field will
       * not be returned in the response.
       */
      mask?: DocumentMask;
      /**
       * Starts a new transaction and reads the documents.
       * Defaults to a read-only transaction.
       * The new transaction ID will be returned as the first response in the
       * stream.
       */
      newTransaction?: TransactionOptions;
      /**
       * Reads documents as they were at the given time.
       * This may not be older than 270 seconds.
       */
      readTime?: string;
      /** Reads documents in a transaction. */
      transaction?: string;
    }
    interface BatchGetDocumentsResponse {
      /** A document that was requested. */
      found?: Document;
      /**
       * A document name that was requested but does not exist. In the format:
       * `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
       */
      missing?: string;
      /**
       * The time at which the document was read.
       * This may be monotically increasing, in this case the previous documents in
       * the result stream are guaranteed not to have changed between their
       * read_time and this one.
       */
      readTime?: string;
      /**
       * The transaction that was started as part of this request.
       * Will only be set in the first response, and only if
       * BatchGetDocumentsRequest.new_transaction was set in the request.
       */
      transaction?: string;
    }
    interface BeginTransactionRequest {
      /**
       * The options for the transaction.
       * Defaults to a read-write transaction.
       */
      options?: TransactionOptions;
    }
    interface BeginTransactionResponse {
      /** The transaction that was started. */
      transaction?: string;
    }
    interface CollectionSelector {
      /**
       * When false, selects only collections that are immediate children of
       * the `parent` specified in the containing `RunQueryRequest`.
       * When true, selects all descendant collections.
       */
      allDescendants?: boolean;
      /**
       * The collection ID.
       * When set, selects only collections with this ID.
       */
      collectionId?: string;
    }
    interface CommitRequest {
      /** If set, applies all writes in this transaction, and commits it. */
      transaction?: string;
      /**
       * The writes to apply.
       *
       * Always executed atomically and in order.
       */
      writes?: Write[];
    }
    interface CommitResponse {
      /**
       * The time at which the commit occurred. Any read with an equal or greater
       * `read_time` is guaranteed to see the effects of the commit.
       */
      commitTime?: string;
      /**
       * The result of applying the writes.
       *
       * This i-th write result corresponds to the i-th write in the
       * request.
       */
      writeResults?: WriteResult[];
    }
    interface CompositeFilter {
      /**
       * The list of filters to combine.
       * Must contain at least one filter.
       */
      filters?: Filter[];
      /** The operator for combining multiple filters. */
      op?: string;
    }
    interface Cursor {
      /**
       * If the position is just before or just after the given values, relative
       * to the sort order defined by the query.
       */
      before?: boolean;
      /**
       * The values that represent a position, in the order they appear in
       * the order by clause of a query.
       *
       * Can contain fewer values than specified in the order by clause.
       */
      values?: Value[];
    }
    interface Document {
      /**
       * Output only. The time at which the document was created.
       *
       * This value increases monotonically when a document is deleted then
       * recreated. It can also be compared to values from other documents and
       * the `read_time` of a query.
       */
      createTime?: string;
      /**
       * The document's fields.
       *
       * The map keys represent field names.
       *
       * A simple field name contains only characters `a` to `z`, `A` to `Z`,
       * `0` to `9`, or `_`, and must not start with `0` to `9`. For example,
       * `foo_bar_17`.
       *
       * Field names matching the regular expression `__.&#42;__` are reserved. Reserved
       * field names are forbidden except in certain documented contexts. The map
       * keys, represented as UTF-8, must not exceed 1,500 bytes and cannot be
       * empty.
       *
       * Field paths may be used in other contexts to refer to structured fields
       * defined here. For `map_value`, the field path is represented by the simple
       * or quoted field names of the containing fields, delimited by `.`. For
       * example, the structured field
       * `"foo" : { map_value: { "x&y" : { string_value: "hello" }}}` would be
       * represented by the field path `foo.x&y`.
       *
       * Within a field path, a quoted field name starts and ends with `` ` `` and
       * may contain any character. Some characters, including `` ` ``, must be
       * escaped using a `\`. For example, `` `x&y` `` represents `x&y` and
       * `` `bak\`tik` `` represents `` bak`tik ``.
       */
      fields?: Record<string, Value>;
      /**
       * The resource name of the document, for example
       * `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
       */
      name?: string;
      /**
       * Output only. The time at which the document was last changed.
       *
       * This value is initially set to the `create_time` then increases
       * monotonically with each change to the document. It can also be
       * compared to values from other documents and the `read_time` of a query.
       */
      updateTime?: string;
    }
    interface DocumentChange {
      /**
       * The new state of the Document.
       *
       * If `mask` is set, contains only fields that were updated or added.
       */
      document?: Document;
      /** A set of target IDs for targets that no longer match this document. */
      removedTargetIds?: number[];
      /** A set of target IDs of targets that match this document. */
      targetIds?: number[];
    }
    interface DocumentDelete {
      /** The resource name of the Document that was deleted. */
      document?: string;
      /**
       * The read timestamp at which the delete was observed.
       *
       * Greater or equal to the `commit_time` of the delete.
       */
      readTime?: string;
      /** A set of target IDs for targets that previously matched this entity. */
      removedTargetIds?: number[];
    }
    interface DocumentMask {
      /**
       * The list of field paths in the mask. See Document.fields for a field
       * path syntax reference.
       */
      fieldPaths?: string[];
    }
    interface DocumentRemove {
      /** The resource name of the Document that has gone out of view. */
      document?: string;
      /**
       * The read timestamp at which the remove was observed.
       *
       * Greater or equal to the `commit_time` of the change/delete/remove.
       */
      readTime?: string;
      /** A set of target IDs for targets that previously matched this document. */
      removedTargetIds?: number[];
    }
    interface DocumentsTarget {
      /**
       * The names of the documents to retrieve. In the format:
       * `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
       * The request will fail if any of the document is not a child resource of
       * the given `database`. Duplicate names will be elided.
       */
      documents?: string[];
    }
    interface DocumentTransform {
      /** The name of the document to transform. */
      document?: string;
      /**
       * The list of transformations to apply to the fields of the document, in
       * order.
       * This must not be empty.
       */
      fieldTransforms?: FieldTransform[];
    }
    // eslint-disable-next-line @typescript-eslint/no-empty-interface
    interface Empty {}
    interface ExistenceFilter {
      /**
       * The total count of documents that match target_id.
       *
       * If different from the count of documents in the client that match, the
       * client must manually determine which documents no longer match the target.
       */
      count?: number;
      /** The target ID to which this filter applies. */
      targetId?: number;
    }
    interface FieldFilter {
      /** The field to filter by. */
      field?: FieldReference;
      /** The operator to filter by. */
      op?: string;
      /** The value to compare to. */
      value?: Value;
    }
    interface FieldReference {
      fieldPath?: string;
    }
    interface FieldTransform {
      /**
       * Append the given elements in order if they are not already present in
       * the current field value.
       * If the field is not an array, or if the field does not yet exist, it is
       * first set to the empty array.
       *
       * Equivalent numbers of different types (e.g. 3L and 3.0) are
       * considered equal when checking if a value is missing.
       * NaN is equal to NaN, and Null is equal to Null.
       * If the input contains multiple equivalent values, only the first will
       * be considered.
       *
       * The corresponding transform_result will be the null value.
       */
      appendMissingElements?: ArrayValue;
      /**
       * The path of the field. See Document.fields for the field path syntax
       * reference.
       */
      fieldPath?: string;
      /**
       * Adds the given value to the field's current value.
       *
       * This must be an integer or a double value.
       * If the field is not an integer or double, or if the field does not yet
       * exist, the transformation will set the field to the given value.
       * If either of the given value or the current field value are doubles,
       * both values will be interpreted as doubles. Double arithmetic and
       * representation of double values follow IEEE 754 semantics.
       * If there is positive/negative integer overflow, the field is resolved
       * to the largest magnitude positive/negative integer.
       */
      increment?: Value;
      /**
       * Sets the field to the maximum of its current value and the given value.
       *
       * This must be an integer or a double value.
       * If the field is not an integer or double, or if the field does not yet
       * exist, the transformation will set the field to the given value.
       * If a maximum operation is applied where the field and the input value
       * are of mixed types (that is - one is an integer and one is a double)
       * the field takes on the type of the larger operand. If the operands are
       * equivalent (e.g. 3 and 3.0), the field does not change.
       * 0, 0.0, and -0.0 are all zero. The maximum of a zero stored value and
       * zero input value is always the stored value.
       * The maximum of any numeric value x and NaN is NaN.
       */
      maximum?: Value;
      /**
       * Sets the field to the minimum of its current value and the given value.
       *
       * This must be an integer or a double value.
       * If the field is not an integer or double, or if the field does not yet
       * exist, the transformation will set the field to the input value.
       * If a minimum operation is applied where the field and the input value
       * are of mixed types (that is - one is an integer and one is a double)
       * the field takes on the type of the smaller operand. If the operands are
       * equivalent (e.g. 3 and 3.0), the field does not change.
       * 0, 0.0, and -0.0 are all zero. The minimum of a zero stored value and
       * zero input value is always the stored value.
       * The minimum of any numeric value x and NaN is NaN.
       */
      minimum?: Value;
      /**
       * Remove all of the given elements from the array in the field.
       * If the field is not an array, or if the field does not yet exist, it is
       * set to the empty array.
       *
       * Equivalent numbers of the different types (e.g. 3L and 3.0) are
       * considered equal when deciding whether an element should be removed.
       * NaN is equal to NaN, and Null is equal to Null.
       * This will remove all equivalent values if there are duplicates.
       *
       * The corresponding transform_result will be the null value.
       */
      removeAllFromArray?: ArrayValue;
      /** Sets the field to the given server value. */
      setToServerValue?: string;
    }
    interface Filter {
      /** A composite filter. */
      compositeFilter?: CompositeFilter;
      /** A filter on a document field. */
      fieldFilter?: FieldFilter;
      /** A filter that takes exactly one argument. */
      unaryFilter?: UnaryFilter;
    }
    interface GoogleFirestoreAdminV1ExportDocumentsMetadata {
      /** Which collection ids are being exported. */
      collectionIds?: string[];
      /**
       * The time this operation completed. Will be unset if operation still in
       * progress.
       */
      endTime?: string;
      /** The state of the export operation. */
      operationState?: string;
      /** Where the entities are being exported to. */
      outputUriPrefix?: string;
      /** The progress, in bytes, of this operation. */
      progressBytes?: GoogleFirestoreAdminV1Progress;
      /** The progress, in documents, of this operation. */
      progressDocuments?: GoogleFirestoreAdminV1Progress;
      /** The time this operation started. */
      startTime?: string;
    }
    interface GoogleFirestoreAdminV1ExportDocumentsRequest {
      /** Which collection ids to export. Unspecified means all collections. */
      collectionIds?: string[];
      /**
       * The output URI. Currently only supports Google Cloud Storage URIs of the
       * form: `gs://BUCKET_NAME[/NAMESPACE_PATH]`, where `BUCKET_NAME` is the name
       * of the Google Cloud Storage bucket and `NAMESPACE_PATH` is an optional
       * Google Cloud Storage namespace path. When
       * choosing a name, be sure to consider Google Cloud Storage naming
       * guidelines: https://cloud.google.com/storage/docs/naming.
       * If the URI is a bucket (without a namespace path), a prefix will be
       * generated based on the start time.
       */
      outputUriPrefix?: string;
    }
    interface GoogleFirestoreAdminV1ExportDocumentsResponse {
      /**
       * Location of the output files. This can be used to begin an import
       * into Cloud Firestore (this project or another project) after the operation
       * completes successfully.
       */
      outputUriPrefix?: string;
    }
    interface GoogleFirestoreAdminV1Field {
      /**
       * The index configuration for this field. If unset, field indexing will
       * revert to the configuration defined by the `ancestor_field`. To
       * explicitly remove all indexes for this field, specify an index config
       * with an empty list of indexes.
       */
      indexConfig?: GoogleFirestoreAdminV1IndexConfig;
      /**
       * A field name of the form
       * `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/fields/{field_path}`
       *
       * A field path may be a simple field name, e.g. `address` or a path to fields
       * within map_value , e.g. `address.city`,
       * or a special field path. The only valid special field is `&#42;`, which
       * represents any field.
       *
       * Field paths may be quoted using ` (backtick). The only character that needs
       * to be escaped within a quoted field path is the backtick character itself,
       * escaped using a backslash. Special characters in field paths that
       * must be quoted include: `&#42;`, `.`,
       * ``` (backtick), `[`, `]`, as well as any ascii symbolic characters.
       *
       * Examples:
       * (Note: Comments here are written in markdown syntax, so there is an
       * additional layer of backticks to represent a code block)
       * `\`address.city\`` represents a field named `address.city`, not the map key
       * `city` in the field `address`.
       * `\`&#42;\`` represents a field named `&#42;`, not any field.
       *
       * A special `Field` contains the default indexing settings for all fields.
       * This field's resource name is:
       * `projects/{project_id}/databases/{database_id}/collectionGroups/__default__/fields/&#42;`
       * Indexes defined on this `Field` will be applied to all fields which do not
       * have their own `Field` index configuration.
       */
      name?: string;
    }
    interface GoogleFirestoreAdminV1FieldOperationMetadata {
      /**
       * The time this operation completed. Will be unset if operation still in
       * progress.
       */
      endTime?: string;
      /**
       * The field resource that this operation is acting on. For example:
       * `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/fields/{field_path}`
       */
      field?: string;
      /**
       * A list of IndexConfigDelta, which describe the intent of this
       * operation.
       */
      indexConfigDeltas?: GoogleFirestoreAdminV1IndexConfigDelta[];
      /** The progress, in bytes, of this operation. */
      progressBytes?: GoogleFirestoreAdminV1Progress;
      /** The progress, in documents, of this operation. */
      progressDocuments?: GoogleFirestoreAdminV1Progress;
      /** The time this operation started. */
      startTime?: string;
      /** The state of the operation. */
      state?: string;
    }
    interface GoogleFirestoreAdminV1ImportDocumentsMetadata {
      /** Which collection ids are being imported. */
      collectionIds?: string[];
      /**
       * The time this operation completed. Will be unset if operation still in
       * progress.
       */
      endTime?: string;
      /** The location of the documents being imported. */
      inputUriPrefix?: string;
      /** The state of the import operation. */
      operationState?: string;
      /** The progress, in bytes, of this operation. */
      progressBytes?: GoogleFirestoreAdminV1Progress;
      /** The progress, in documents, of this operation. */
      progressDocuments?: GoogleFirestoreAdminV1Progress;
      /** The time this operation started. */
      startTime?: string;
    }
    interface GoogleFirestoreAdminV1ImportDocumentsRequest {
      /**
       * Which collection ids to import. Unspecified means all collections included
       * in the import.
       */
      collectionIds?: string[];
      /**
       * Location of the exported files.
       * This must match the output_uri_prefix of an ExportDocumentsResponse from
       * an export that has completed successfully.
       * See:
       * google.firestore.admin.v1.ExportDocumentsResponse.output_uri_prefix.
       */
      inputUriPrefix?: string;
    }
    interface GoogleFirestoreAdminV1Index {
      /**
       * The fields supported by this index.
       *
       * For composite indexes, this is always 2 or more fields.
       * The last field entry is always for the field path `__name__`. If, on
       * creation, `__name__` was not specified as the last field, it will be added
       * automatically with the same direction as that of the last field defined. If
       * the final field in a composite index is not directional, the `__name__`
       * will be ordered ASCENDING (unless explicitly specified).
       *
       * For single field indexes, this will always be exactly one entry with a
       * field path equal to the field path of the associated field.
       */
      fields?: GoogleFirestoreAdminV1IndexField[];
      /**
       * Output only. A server defined name for this index.
       * The form of this name for composite indexes will be:
       * `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/indexes/{composite_index_id}`
       * For single field indexes, this field will be empty.
       */
      name?: string;
      /**
       * Indexes with a collection query scope specified allow queries
       * against a collection that is the child of a specific document, specified at
       * query time, and that has the same collection id.
       *
       * Indexes with a collection group query scope specified allow queries against
       * all collections descended from a specific document, specified at query
       * time, and that have the same collection id as this index.
       */
      queryScope?: string;
      /** Output only. The serving state of the index. */
      state?: string;
    }
    interface GoogleFirestoreAdminV1IndexConfig {
      /**
       * Output only. Specifies the resource name of the `Field` from which this field's
       * index configuration is set (when `uses_ancestor_config` is true),
       * or from which it &#42;would&#42; be set if this field had no index configuration
       * (when `uses_ancestor_config` is false).
       */
      ancestorField?: string;
      /** The indexes supported for this field. */
      indexes?: GoogleFirestoreAdminV1Index[];
      /**
       * Output only
       * When true, the `Field`'s index configuration is in the process of being
       * reverted. Once complete, the index config will transition to the same
       * state as the field specified by `ancestor_field`, at which point
       * `uses_ancestor_config` will be `true` and `reverting` will be `false`.
       */
      reverting?: boolean;
      /**
       * Output only. When true, the `Field`'s index configuration is set from the
       * configuration specified by the `ancestor_field`.
       * When false, the `Field`'s index configuration is defined explicitly.
       */
      usesAncestorConfig?: boolean;
    }
    interface GoogleFirestoreAdminV1IndexConfigDelta {
      /** Specifies how the index is changing. */
      changeType?: string;
      /** The index being changed. */
      index?: GoogleFirestoreAdminV1Index;
    }
    interface GoogleFirestoreAdminV1IndexField {
      /** Indicates that this field supports operations on `array_value`s. */
      arrayConfig?: string;
      /**
       * Can be __name__.
       * For single field indexes, this must match the name of the field or may
       * be omitted.
       */
      fieldPath?: string;
      /**
       * Indicates that this field supports ordering by the specified order or
       * comparing using =, <, <=, >, >=.
       */
      order?: string;
    }
    interface GoogleFirestoreAdminV1IndexOperationMetadata {
      /**
       * The time this operation completed. Will be unset if operation still in
       * progress.
       */
      endTime?: string;
      /**
       * The index resource that this operation is acting on. For example:
       * `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/indexes/{index_id}`
       */
      index?: string;
      /** The progress, in bytes, of this operation. */
      progressBytes?: GoogleFirestoreAdminV1Progress;
      /** The progress, in documents, of this operation. */
      progressDocuments?: GoogleFirestoreAdminV1Progress;
      /** The time this operation started. */
      startTime?: string;
      /** The state of the operation. */
      state?: string;
    }
    interface GoogleFirestoreAdminV1ListFieldsResponse {
      /** The requested fields. */
      fields?: GoogleFirestoreAdminV1Field[];
      /**
       * A page token that may be used to request another page of results. If blank,
       * this is the last page.
       */
      nextPageToken?: string;
    }
    interface GoogleFirestoreAdminV1ListIndexesResponse {
      /** The requested indexes. */
      indexes?: GoogleFirestoreAdminV1Index[];
      /**
       * A page token that may be used to request another page of results. If blank,
       * this is the last page.
       */
      nextPageToken?: string;
    }
    // eslint-disable-next-line @typescript-eslint/no-empty-interface
    interface GoogleFirestoreAdminV1LocationMetadata {}
    interface GoogleFirestoreAdminV1Progress {
      /** The amount of work completed. */
      completedWork?: string;
      /** The amount of work estimated. */
      estimatedWork?: string;
    }
    // eslint-disable-next-line @typescript-eslint/no-empty-interface
    interface GoogleLongrunningCancelOperationRequest {}
    interface GoogleLongrunningListOperationsResponse {
      /** The standard List next-page token. */
      nextPageToken?: string;
      /** A list of operations that matches the specified filter in the request. */
      operations?: GoogleLongrunningOperation[];
    }
    interface GoogleLongrunningOperation {
      /**
       * If the value is `false`, it means the operation is still in progress.
       * If `true`, the operation is completed, and either `error` or `response` is
       * available.
       */
      done?: boolean;
      /** The error result of the operation in case of failure or cancellation. */
      error?: Status;
      /**
       * Service-specific metadata associated with the operation.  It typically
       * contains progress information and common metadata such as create time.
       * Some services might not provide such metadata.  Any method that returns a
       * long-running operation should document the metadata type, if any.
       */
      metadata?: Record<string, any>;
      /**
       * The server-assigned name, which is only unique within the same service that
       * originally returns it. If you use the default HTTP mapping, the
       * `name` should be a resource name ending with `operations/{unique_id}`.
       */
      name?: string;
      /**
       * The normal response of the operation in case of success.  If the original
       * method returns no data on success, such as `Delete`, the response is
       * `google.protobuf.Empty`.  If the original method is standard
       * `Get`/`Create`/`Update`, the response should be the resource.  For other
       * methods, the response should have the type `XxxResponse`, where `Xxx`
       * is the original method name.  For example, if the original method name
       * is `TakeSnapshot()`, the inferred response type is
       * `TakeSnapshotResponse`.
       */
      response?: Record<string, any>;
    }
    interface LatLng {
      /** The latitude in degrees. It must be in the range [-90.0, +90.0]. */
      latitude?: number;
      /** The longitude in degrees. It must be in the range [-180.0, +180.0]. */
      longitude?: number;
    }
    interface ListCollectionIdsRequest {
      /** The maximum number of results to return. */
      pageSize?: number;
      /**
       * A page token. Must be a value from
       * ListCollectionIdsResponse.
       */
      pageToken?: string;
    }
    interface ListCollectionIdsResponse {
      /** The collection ids. */
      collectionIds?: string[];
      /** A page token that may be used to continue the list. */
      nextPageToken?: string;
    }
    interface ListDocumentsResponse {
      /** The Documents found. */
      documents?: Document[];
      /** The next page token. */
      nextPageToken?: string;
    }
    interface ListenRequest {
      /** A target to add to this stream. */
      addTarget?: Target;
      /** Labels associated with this target change. */
      labels?: Record<string, string>;
      /** The ID of a target to remove from this stream. */
      removeTarget?: number;
    }
    interface ListenResponse {
      /** A Document has changed. */
      documentChange?: DocumentChange;
      /** A Document has been deleted. */
      documentDelete?: DocumentDelete;
      /**
       * A Document has been removed from a target (because it is no longer
       * relevant to that target).
       */
      documentRemove?: DocumentRemove;
      /**
       * A filter to apply to the set of documents previously returned for the
       * given target.
       *
       * Returned when documents may have been removed from the given target, but
       * the exact documents are unknown.
       */
      filter?: ExistenceFilter;
      /** Targets have changed. */
      targetChange?: TargetChange;
    }
    interface ListLocationsResponse {
      /** A list of locations that matches the specified filter in the request. */
      locations?: Location[];
      /** The standard List next-page token. */
      nextPageToken?: string;
    }
    interface Location {
      /**
       * The friendly name for this location, typically a nearby city name.
       * For example, "Tokyo".
       */
      displayName?: string;
      /**
       * Cross-service attributes for the location. For example
       *
       * {"cloud.googleapis.com/region": "us-east1"}
       */
      labels?: Record<string, string>;
      /** The canonical id for this location. For example: `"us-east1"`. */
      locationId?: string;
      /**
       * Service-specific metadata. For example the available capacity at the given
       * location.
       */
      metadata?: Record<string, any>;
      /**
       * Resource name for the location, which may vary between implementations.
       * For example: `"projects/example-project/locations/us-east1"`
       */
      name?: string;
    }
    interface MapValue {
      /**
       * The map's fields.
       *
       * The map keys represent field names. Field names matching the regular
       * expression `__.&#42;__` are reserved. Reserved field names are forbidden except
       * in certain documented contexts. The map keys, represented as UTF-8, must
       * not exceed 1,500 bytes and cannot be empty.
       */
      fields?: Record<string, Value>;
    }
    interface Order {
      /** The direction to order by. Defaults to `ASCENDING`. */
      direction?: string;
      /** The field to order by. */
      field?: FieldReference;
    }
    interface Precondition {
      /**
       * When set to `true`, the target document must exist.
       * When set to `false`, the target document must not exist.
       */
      exists?: boolean;
      /**
       * When set, the target document must exist and have been last updated at
       * that time.
       */
      updateTime?: string;
    }
    interface Projection {
      /**
       * The fields to return.
       *
       * If empty, all fields are returned. To only return the name
       * of the document, use `['__name__']`.
       */
      fields?: FieldReference[];
    }
    interface QueryTarget {
      /**
       * The parent resource name. In the format:
       * `projects/{project_id}/databases/{database_id}/documents` or
       * `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
       * For example:
       * `projects/my-project/databases/my-database/documents` or
       * `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`
       */
      parent?: string;
      /** A structured query. */
      structuredQuery?: StructuredQuery;
    }
    interface ReadOnly {
      /**
       * Reads documents at the given time.
       * This may not be older than 60 seconds.
       */
      readTime?: string;
    }
    interface ReadWrite {
      /** An optional transaction to retry. */
      retryTransaction?: string;
    }
    interface RollbackRequest {
      /** Required. The transaction to roll back. */
      transaction?: string;
    }
    interface RunQueryRequest {
      /**
       * Starts a new transaction and reads the documents.
       * Defaults to a read-only transaction.
       * The new transaction ID will be returned as the first response in the
       * stream.
       */
      newTransaction?: TransactionOptions;
      /**
       * Reads documents as they were at the given time.
       * This may not be older than 270 seconds.
       */
      readTime?: string;
      /** A structured query. */
      structuredQuery?: StructuredQuery;
      /** Reads documents in a transaction. */
      transaction?: string;
    }
    interface RunQueryResponse {
      /**
       * A query result.
       * Not set when reporting partial progress.
       */
      document?: Document;
      /**
       * The time at which the document was read. This may be monotonically
       * increasing; in this case, the previous documents in the result stream are
       * guaranteed not to have changed between their `read_time` and this one.
       *
       * If the query returns no results, a response with `read_time` and no
       * `document` will be sent, and this represents the time at which the query
       * was run.
       */
      readTime?: string;
      /**
       * The number of results that have been skipped due to an offset between
       * the last response and the current response.
       */
      skippedResults?: number;
      /**
       * The transaction that was started as part of this request.
       * Can only be set in the first response, and only if
       * RunQueryRequest.new_transaction was set in the request.
       * If set, no other fields will be set in this response.
       */
      transaction?: string;
    }
    interface Status {
      /** The status code, which should be an enum value of google.rpc.Code. */
      code?: number;
      /**
       * A list of messages that carry the error details.  There is a common set of
       * message types for APIs to use.
       */
      details?: Array<Record<string, any>>;
      /**
       * A developer-facing error message, which should be in English. Any
       * user-facing error message should be localized and sent in the
       * google.rpc.Status.details field, or localized by the client.
       */
      message?: string;
    }
    interface StructuredQuery {
      /** A end point for the query results. */
      endAt?: Cursor;
      /** The collections to query. */
      from?: CollectionSelector[];
      /**
       * The maximum number of results to return.
       *
       * Applies after all other constraints.
       * Must be >= 0 if specified.
       */
      limit?: number;
      /**
       * The number of results to skip.
       *
       * Applies before limit, but after all other constraints. Must be >= 0 if
       * specified.
       */
      offset?: number;
      /**
       * The order to apply to the query results.
       *
       * Firestore guarantees a stable ordering through the following rules:
       *
       * &#42; Any field required to appear in `order_by`, that is not already
       * specified in `order_by`, is appended to the order in field name order
       * by default.
       * &#42; If an order on `__name__` is not specified, it is appended by default.
       *
       * Fields are appended with the same sort direction as the last order
       * specified, or 'ASCENDING' if no order was specified. For example:
       *
       * &#42; `SELECT &#42; FROM Foo ORDER BY A` becomes
       * `SELECT &#42; FROM Foo ORDER BY A, __name__`
       * &#42; `SELECT &#42; FROM Foo ORDER BY A DESC` becomes
       * `SELECT &#42; FROM Foo ORDER BY A DESC, __name__ DESC`
       * &#42; `SELECT &#42; FROM Foo WHERE A > 1` becomes
       * `SELECT &#42; FROM Foo WHERE A > 1 ORDER BY A, __name__`
       */
      orderBy?: Order[];
      /** The projection to return. */
      select?: Projection;
      /** A starting point for the query results. */
      startAt?: Cursor;
      /** The filter to apply. */
      where?: Filter;
    }
    interface Target {
      /** A target specified by a set of document names. */
      documents?: DocumentsTarget;
      /** If the target should be removed once it is current and consistent. */
      once?: boolean;
      /** A target specified by a query. */
      query?: QueryTarget;
      /**
       * Start listening after a specific `read_time`.
       *
       * The client must know the state of matching documents at this time.
       */
      readTime?: string;
      /**
       * A resume token from a prior TargetChange for an identical target.
       *
       * Using a resume token with a different target is unsupported and may fail.
       */
      resumeToken?: string;
      /**
       * The target ID that identifies the target on the stream. Must be a positive
       * number and non-zero.
       */
      targetId?: number;
    }
    interface TargetChange {
      /** The error that resulted in this change, if applicable. */
      cause?: Status;
      /**
       * The consistent `read_time` for the given `target_ids` (omitted when the
       * target_ids are not at a consistent snapshot).
       *
       * The stream is guaranteed to send a `read_time` with `target_ids` empty
       * whenever the entire stream reaches a new consistent snapshot. ADD,
       * CURRENT, and RESET messages are guaranteed to (eventually) result in a
       * new consistent snapshot (while NO_CHANGE and REMOVE messages are not).
       *
       * For a given stream, `read_time` is guaranteed to be monotonically
       * increasing.
       */
      readTime?: string;
      /**
       * A token that can be used to resume the stream for the given `target_ids`,
       * or all targets if `target_ids` is empty.
       *
       * Not set on every target change.
       */
      resumeToken?: string;
      /** The type of change that occurred. */
      targetChangeType?: string;
      /**
       * The target IDs of targets that have changed.
       *
       * If empty, the change applies to all targets.
       *
       * The order of the target IDs is not defined.
       */
      targetIds?: number[];
    }
    interface TransactionOptions {
      /** The transaction can only be used for read operations. */
      readOnly?: ReadOnly;
      /** The transaction can be used for both read and write operations. */
      readWrite?: ReadWrite;
    }
    interface UnaryFilter {
      /** The field to which to apply the operator. */
      field?: FieldReference;
      /** The unary operator to apply. */
      op?: string;
    }
    interface Value {
      /**
       * An array value.
       *
       * Cannot directly contain another array value, though can contain an
       * map which contains another array.
       */
      arrayValue?: ArrayValue;
      /** A boolean value. */
      booleanValue?: boolean;
      /**
       * A bytes value.
       *
       * Must not exceed 1 MiB - 89 bytes.
       * Only the first 1,500 bytes are considered by queries.
       */
      bytesValue?: string;
      /** A double value. */
      doubleValue?: number;
      /** A geo point value representing a point on the surface of Earth. */
      geoPointValue?: LatLng;
      /** An integer value. */
      integerValue?: string;
      /** A map value. */
      mapValue?: MapValue;
      /** A null value. */
      nullValue?: null;
      /**
       * A reference to a document. For example:
       * `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
       */
      referenceValue?: string;
      /**
       * A string value.
       *
       * The string, represented as UTF-8, must not exceed 1 MiB - 89 bytes.
       * Only the first 1,500 bytes of the UTF-8 representation are considered by
       * queries.
       */
      stringValue?: string;
      /**
       * A timestamp value.
       *
       * Precise only to microseconds. When stored, any additional precision is
       * rounded down.
       */
      timestampValue?: string;
    }
    interface Write {
      /**
       * An optional precondition on the document.
       *
       * The write will fail if this is set and not met by the target document.
       */
      currentDocument?: Precondition;
      /**
       * A document name to delete. In the format:
       * `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
       */
      delete?: string;
      /** Applies a transformation to a document. */
      transform?: DocumentTransform;
      /** A document to write. */
      update?: Document;
      /**
       * The fields to update in this write.
       *
       * This field can be set only when the operation is `update`.
       * If the mask is not set for an `update` and the document exists, any
       * existing data will be overwritten.
       * If the mask is set and the document on the server has fields not covered by
       * the mask, they are left unchanged.
       * Fields referenced in the mask, but not present in the input document, are
       * deleted from the document on the server.
       * The field paths in this mask must not contain a reserved field name.
       */
      updateMask?: DocumentMask;
      /**
       * The transforms to perform after update.
       *
       * This field can be set only when the operation is `update`. If present, this
       * write is equivalent to performing `update` and `transform` to the same
       * document atomically and in order.
       */
      updateTransforms?: FieldTransform[];
    }
    interface WriteRequest {
      /** Labels associated with this write request. */
      labels?: Record<string, string>;
      /**
       * The ID of the write stream to resume.
       * This may only be set in the first message. When left empty, a new write
       * stream will be created.
       */
      streamId?: string;
      /**
       * A stream token that was previously sent by the server.
       *
       * The client should set this field to the token from the most recent
       * WriteResponse it has received. This acknowledges that the client has
       * received responses up to this token. After sending this token, earlier
       * tokens may not be used anymore.
       *
       * The server may close the stream if there are too many unacknowledged
       * responses.
       *
       * Leave this field unset when creating a new stream. To resume a stream at
       * a specific point, set this field and the `stream_id` field.
       *
       * Leave this field unset when creating a new stream.
       */
      streamToken?: string;
      /**
       * The writes to apply.
       *
       * Always executed atomically and in order.
       * This must be empty on the first request.
       * This may be empty on the last request.
       * This must not be empty on all other requests.
       */
      writes?: Write[];
    }
    interface WriteResponse {
      /**
       * The time at which the commit occurred. Any read with an equal or greater
       * `read_time` is guaranteed to see the effects of the write.
       */
      commitTime?: string;
      /**
       * The ID of the stream.
       * Only set on the first message, when a new stream was created.
       */
      streamId?: string;
      /**
       * A token that represents the position of this response in the stream.
       * This can be used by a client to resume the stream at this point.
       *
       * This field is always set.
       */
      streamToken?: string;
      /**
       * The result of applying the writes.
       *
       * This i-th write result corresponds to the i-th write in the
       * request.
       */
      writeResults?: WriteResult[];
    }
    interface WriteResult {
      /**
       * The results of applying each DocumentTransform.FieldTransform, in the
       * same order.
       */
      transformResults?: Value[];
      /**
       * The last update time of the document after applying the write. Not set
       * after a `delete`.
       *
       * If the write did not actually change the document, this will be the
       * previous update_time.
       */
      updateTime?: string;
    }
    interface FieldsResource {
      /** Gets the metadata and configuration for a Field. */
      get(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        'access_token'?: string;
        /** Data format for response. */
        'alt'?: string;
        /** JSONP */
        'callback'?: string;
        /** Selector specifying which fields to include in a partial response. */
        'fields'?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        'key'?: string;
        /**
         * Required. A name of the form
         * `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/fields/{field_id}`
         */
        'name': string;
        /** OAuth 2.0 token for the current user. */
        'oauth_token'?: string;
        /** Returns response with indentations and line breaks. */
        'prettyPrint'?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        'quotaUser'?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        'upload_protocol'?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        'uploadType'?: string;
      }): Request<GoogleFirestoreAdminV1Field>;
      /**
       * Lists the field configuration and metadata for this database.
       *
       * Currently, FirestoreAdmin.ListFields only supports listing fields
       * that have been explicitly overridden. To issue this query, call
       * FirestoreAdmin.ListFields with the filter set to
       * `indexConfig.usesAncestorConfig:false`.
       */
      list(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        'access_token'?: string;
        /** Data format for response. */
        'alt'?: string;
        /** JSONP */
        'callback'?: string;
        /** Selector specifying which fields to include in a partial response. */
        'fields'?: string;
        /**
         * The filter to apply to list results. Currently,
         * FirestoreAdmin.ListFields only supports listing fields
         * that have been explicitly overridden. To issue this query, call
         * FirestoreAdmin.ListFields with the filter set to
         * `indexConfig.usesAncestorConfig:false`.
         */
        'filter'?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        'key'?: string;
        /** OAuth 2.0 token for the current user. */
        'oauth_token'?: string;
        /** The number of results to return. */
        'pageSize'?: number;
        /**
         * A page token, returned from a previous call to
         * FirestoreAdmin.ListFields, that may be used to get the next
         * page of results.
         */
        'pageToken'?: string;
        /**
         * Required. A parent name of the form
         * `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`
         */
        'parent': string;
        /** Returns response with indentations and line breaks. */
        'prettyPrint'?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        'quotaUser'?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        'upload_protocol'?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        'uploadType'?: string;
      }): Request<GoogleFirestoreAdminV1ListFieldsResponse>;
      /**
       * Updates a field configuration. Currently, field updates apply only to
       * single field index configuration. However, calls to
       * FirestoreAdmin.UpdateField should provide a field mask to avoid
       * changing any configuration that the caller isn't aware of. The field mask
       * should be specified as: `{ paths: "index_config" }`.
       *
       * This call returns a google.longrunning.Operation which may be used to
       * track the status of the field update. The metadata for
       * the operation will be the type FieldOperationMetadata.
       *
       * To configure the default field settings for the database, use
       * the special `Field` with resource name:
       * `projects/{project_id}/databases/{database_id}/collectionGroups/__default__/fields/&#42;`.
       */
      patch(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        'access_token'?: string;
        /** Data format for response. */
        'alt'?: string;
        /** JSONP */
        'callback'?: string;
        /** Selector specifying which fields to include in a partial response. */
        'fields'?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        'key'?: string;
        /**
         * A field name of the form
         * `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/fields/{field_path}`
         *
         * A field path may be a simple field name, e.g. `address` or a path to fields
         * within map_value , e.g. `address.city`,
         * or a special field path. The only valid special field is `&#42;`, which
         * represents any field.
         *
         * Field paths may be quoted using ` (backtick). The only character that needs
         * to be escaped within a quoted field path is the backtick character itself,
         * escaped using a backslash. Special characters in field paths that
         * must be quoted include: `&#42;`, `.`,
         * ``` (backtick), `[`, `]`, as well as any ascii symbolic characters.
         *
         * Examples:
         * (Note: Comments here are written in markdown syntax, so there is an
         * additional layer of backticks to represent a code block)
         * `\`address.city\`` represents a field named `address.city`, not the map key
         * `city` in the field `address`.
         * `\`&#42;\`` represents a field named `&#42;`, not any field.
         *
         * A special `Field` contains the default indexing settings for all fields.
         * This field's resource name is:
         * `projects/{project_id}/databases/{database_id}/collectionGroups/__default__/fields/&#42;`
         * Indexes defined on this `Field` will be applied to all fields which do not
         * have their own `Field` index configuration.
         */
        'name': string;
        /** OAuth 2.0 token for the current user. */
        'oauth_token'?: string;
        /** Returns response with indentations and line breaks. */
        'prettyPrint'?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        'quotaUser'?: string;
        /**
         * A mask, relative to the field. If specified, only configuration specified
         * by this field_mask will be updated in the field.
         */
        'updateMask'?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        'upload_protocol'?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        'uploadType'?: string;
        /** Request body */
        'resource': GoogleFirestoreAdminV1Field;
      }): Request<GoogleLongrunningOperation>;
      patch(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          'access_token'?: string;
          /** Data format for response. */
          'alt'?: string;
          /** JSONP */
          'callback'?: string;
          /** Selector specifying which fields to include in a partial response. */
          'fields'?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          'key'?: string;
          /**
           * A field name of the form
           * `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/fields/{field_path}`
           *
           * A field path may be a simple field name, e.g. `address` or a path to fields
           * within map_value , e.g. `address.city`,
           * or a special field path. The only valid special field is `&#42;`, which
           * represents any field.
           *
           * Field paths may be quoted using ` (backtick). The only character that needs
           * to be escaped within a quoted field path is the backtick character itself,
           * escaped using a backslash. Special characters in field paths that
           * must be quoted include: `&#42;`, `.`,
           * ``` (backtick), `[`, `]`, as well as any ascii symbolic characters.
           *
           * Examples:
           * (Note: Comments here are written in markdown syntax, so there is an
           * additional layer of backticks to represent a code block)
           * `\`address.city\`` represents a field named `address.city`, not the map key
           * `city` in the field `address`.
           * `\`&#42;\`` represents a field named `&#42;`, not any field.
           *
           * A special `Field` contains the default indexing settings for all fields.
           * This field's resource name is:
           * `projects/{project_id}/databases/{database_id}/collectionGroups/__default__/fields/&#42;`
           * Indexes defined on this `Field` will be applied to all fields which do not
           * have their own `Field` index configuration.
           */
          'name': string;
          /** OAuth 2.0 token for the current user. */
          'oauth_token'?: string;
          /** Returns response with indentations and line breaks. */
          'prettyPrint'?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          'quotaUser'?: string;
          /**
           * A mask, relative to the field. If specified, only configuration specified
           * by this field_mask will be updated in the field.
           */
          'updateMask'?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          'upload_protocol'?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          'uploadType'?: string;
        },
        body: GoogleFirestoreAdminV1Field
      ): Request<GoogleLongrunningOperation>;
    }
    // tslint:disable-next-line:interface-name
    interface IndexesResource {
      /**
       * Creates a composite index. This returns a google.longrunning.Operation
       * which may be used to track the status of the creation. The metadata for
       * the operation will be the type IndexOperationMetadata.
       */
      create(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        'access_token'?: string;
        /** Data format for response. */
        'alt'?: string;
        /** JSONP */
        'callback'?: string;
        /** Selector specifying which fields to include in a partial response. */
        'fields'?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        'key'?: string;
        /** OAuth 2.0 token for the current user. */
        'oauth_token'?: string;
        /**
         * Required. A parent name of the form
         * `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`
         */
        'parent': string;
        /** Returns response with indentations and line breaks. */
        'prettyPrint'?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        'quotaUser'?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        'upload_protocol'?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        'uploadType'?: string;
        /** Request body */
        'resource': GoogleFirestoreAdminV1Index;
      }): Request<GoogleLongrunningOperation>;
      create(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          'access_token'?: string;
          /** Data format for response. */
          'alt'?: string;
          /** JSONP */
          'callback'?: string;
          /** Selector specifying which fields to include in a partial response. */
          'fields'?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          'key'?: string;
          /** OAuth 2.0 token for the current user. */
          'oauth_token'?: string;
          /**
           * Required. A parent name of the form
           * `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`
           */
          'parent': string;
          /** Returns response with indentations and line breaks. */
          'prettyPrint'?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          'quotaUser'?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          'upload_protocol'?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          'uploadType'?: string;
        },
        body: GoogleFirestoreAdminV1Index
      ): Request<GoogleLongrunningOperation>;
      /** Deletes a composite index. */
      delete(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        'access_token'?: string;
        /** Data format for response. */
        'alt'?: string;
        /** JSONP */
        'callback'?: string;
        /** Selector specifying which fields to include in a partial response. */
        'fields'?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        'key'?: string;
        /**
         * Required. A name of the form
         * `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/indexes/{index_id}`
         */
        'name': string;
        /** OAuth 2.0 token for the current user. */
        'oauth_token'?: string;
        /** Returns response with indentations and line breaks. */
        'prettyPrint'?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        'quotaUser'?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        'upload_protocol'?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        'uploadType'?: string;
      }): Request<{}>;
      /** Gets a composite index. */
      get(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        'access_token'?: string;
        /** Data format for response. */
        'alt'?: string;
        /** JSONP */
        'callback'?: string;
        /** Selector specifying which fields to include in a partial response. */
        'fields'?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        'key'?: string;
        /**
         * Required. A name of the form
         * `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/indexes/{index_id}`
         */
        'name': string;
        /** OAuth 2.0 token for the current user. */
        'oauth_token'?: string;
        /** Returns response with indentations and line breaks. */
        'prettyPrint'?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        'quotaUser'?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        'upload_protocol'?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        'uploadType'?: string;
      }): Request<GoogleFirestoreAdminV1Index>;
      /** Lists composite indexes. */
      list(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        'access_token'?: string;
        /** Data format for response. */
        'alt'?: string;
        /** JSONP */
        'callback'?: string;
        /** Selector specifying which fields to include in a partial response. */
        'fields'?: string;
        /** The filter to apply to list results. */
        'filter'?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        'key'?: string;
        /** OAuth 2.0 token for the current user. */
        'oauth_token'?: string;
        /** The number of results to return. */
        'pageSize'?: number;
        /**
         * A page token, returned from a previous call to
         * FirestoreAdmin.ListIndexes, that may be used to get the next
         * page of results.
         */
        'pageToken'?: string;
        /**
         * Required. A parent name of the form
         * `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`
         */
        'parent': string;
        /** Returns response with indentations and line breaks. */
        'prettyPrint'?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        'quotaUser'?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        'upload_protocol'?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        'uploadType'?: string;
      }): Request<GoogleFirestoreAdminV1ListIndexesResponse>;
    }
    interface CollectionGroupsResource {
      fields: FieldsResource;
      indexes: IndexesResource;
    }
    interface DocumentsResource {
      /**
       * Gets multiple documents.
       *
       * Documents returned by this method are not guaranteed to be returned in the
       * same order that they were requested.
       */
      batchGet(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        'access_token'?: string;
        /** Data format for response. */
        'alt'?: string;
        /** JSONP */
        'callback'?: string;
        /**
         * Required. The database name. In the format:
         * `projects/{project_id}/databases/{database_id}`.
         */
        'database': string;
        /** Selector specifying which fields to include in a partial response. */
        'fields'?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        'key'?: string;
        /** OAuth 2.0 token for the current user. */
        'oauth_token'?: string;
        /** Returns response with indentations and line breaks. */
        'prettyPrint'?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        'quotaUser'?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        'upload_protocol'?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        'uploadType'?: string;
        /** Request body */
        'resource': BatchGetDocumentsRequest;
      }): Request<BatchGetDocumentsResponse>;
      batchGet(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          'access_token'?: string;
          /** Data format for response. */
          'alt'?: string;
          /** JSONP */
          'callback'?: string;
          /**
           * Required. The database name. In the format:
           * `projects/{project_id}/databases/{database_id}`.
           */
          'database': string;
          /** Selector specifying which fields to include in a partial response. */
          'fields'?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          'key'?: string;
          /** OAuth 2.0 token for the current user. */
          'oauth_token'?: string;
          /** Returns response with indentations and line breaks. */
          'prettyPrint'?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          'quotaUser'?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          'upload_protocol'?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          'uploadType'?: string;
        },
        body: BatchGetDocumentsRequest
      ): Request<BatchGetDocumentsResponse>;
      /** Starts a new transaction. */
      beginTransaction(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        'access_token'?: string;
        /** Data format for response. */
        'alt'?: string;
        /** JSONP */
        'callback'?: string;
        /**
         * Required. The database name. In the format:
         * `projects/{project_id}/databases/{database_id}`.
         */
        'database': string;
        /** Selector specifying which fields to include in a partial response. */
        'fields'?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        'key'?: string;
        /** OAuth 2.0 token for the current user. */
        'oauth_token'?: string;
        /** Returns response with indentations and line breaks. */
        'prettyPrint'?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        'quotaUser'?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        'upload_protocol'?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        'uploadType'?: string;
        /** Request body */
        'resource': BeginTransactionRequest;
      }): Request<BeginTransactionResponse>;
      beginTransaction(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          'access_token'?: string;
          /** Data format for response. */
          'alt'?: string;
          /** JSONP */
          'callback'?: string;
          /**
           * Required. The database name. In the format:
           * `projects/{project_id}/databases/{database_id}`.
           */
          'database': string;
          /** Selector specifying which fields to include in a partial response. */
          'fields'?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          'key'?: string;
          /** OAuth 2.0 token for the current user. */
          'oauth_token'?: string;
          /** Returns response with indentations and line breaks. */
          'prettyPrint'?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          'quotaUser'?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          'upload_protocol'?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          'uploadType'?: string;
        },
        body: BeginTransactionRequest
      ): Request<BeginTransactionResponse>;
      /** Commits a transaction, while optionally updating documents. */
      commit(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        'access_token'?: string;
        /** Data format for response. */
        'alt'?: string;
        /** JSONP */
        'callback'?: string;
        /**
         * Required. The database name. In the format:
         * `projects/{project_id}/databases/{database_id}`.
         */
        'database': string;
        /** Selector specifying which fields to include in a partial response. */
        'fields'?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        'key'?: string;
        /** OAuth 2.0 token for the current user. */
        'oauth_token'?: string;
        /** Returns response with indentations and line breaks. */
        'prettyPrint'?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        'quotaUser'?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        'upload_protocol'?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        'uploadType'?: string;
        /** Request body */
        'resource': CommitRequest;
      }): Request<CommitResponse>;
      commit(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          'access_token'?: string;
          /** Data format for response. */
          'alt'?: string;
          /** JSONP */
          'callback'?: string;
          /**
           * Required. The database name. In the format:
           * `projects/{project_id}/databases/{database_id}`.
           */
          'database': string;
          /** Selector specifying which fields to include in a partial response. */
          'fields'?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          'key'?: string;
          /** OAuth 2.0 token for the current user. */
          'oauth_token'?: string;
          /** Returns response with indentations and line breaks. */
          'prettyPrint'?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          'quotaUser'?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          'upload_protocol'?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          'uploadType'?: string;
        },
        body: CommitRequest
      ): Request<CommitResponse>;
      /** Creates a new document. */
      createDocument(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        'access_token'?: string;
        /** Data format for response. */
        'alt'?: string;
        /** JSONP */
        'callback'?: string;
        /** Required. The collection ID, relative to `parent`, to list. For example: `chatrooms`. */
        'collectionId': string;
        /**
         * The client-assigned document ID to use for this document.
         *
         * Optional. If not specified, an ID will be assigned by the service.
         */
        'documentId'?: string;
        /** Selector specifying which fields to include in a partial response. */
        'fields'?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        'key'?: string;
        /**
         * The list of field paths in the mask. See Document.fields for a field
         * path syntax reference.
         */
        'mask.fieldPaths'?: string | string[];
        /** OAuth 2.0 token for the current user. */
        'oauth_token'?: string;
        /**
         * Required. The parent resource. For example:
         * `projects/{project_id}/databases/{database_id}/documents` or
         * `projects/{project_id}/databases/{database_id}/documents/chatrooms/{chatroom_id}`
         */
        'parent': string;
        /** Returns response with indentations and line breaks. */
        'prettyPrint'?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        'quotaUser'?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        'upload_protocol'?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        'uploadType'?: string;
        /** Request body */
        'resource': Document;
      }): Request<Document>;
      createDocument(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          'access_token'?: string;
          /** Data format for response. */
          'alt'?: string;
          /** JSONP */
          'callback'?: string;
          /** Required. The collection ID, relative to `parent`, to list. For example: `chatrooms`. */
          'collectionId': string;
          /**
           * The client-assigned document ID to use for this document.
           *
           * Optional. If not specified, an ID will be assigned by the service.
           */
          'documentId'?: string;
          /** Selector specifying which fields to include in a partial response. */
          'fields'?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          'key'?: string;
          /**
           * The list of field paths in the mask. See Document.fields for a field
           * path syntax reference.
           */
          'mask.fieldPaths'?: string | string[];
          /** OAuth 2.0 token for the current user. */
          'oauth_token'?: string;
          /**
           * Required. The parent resource. For example:
           * `projects/{project_id}/databases/{database_id}/documents` or
           * `projects/{project_id}/databases/{database_id}/documents/chatrooms/{chatroom_id}`
           */
          'parent': string;
          /** Returns response with indentations and line breaks. */
          'prettyPrint'?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          'quotaUser'?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          'upload_protocol'?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          'uploadType'?: string;
        },
        body: Document
      ): Request<Document>;
      /** Deletes a document. */
      delete(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        'access_token'?: string;
        /** Data format for response. */
        'alt'?: string;
        /** JSONP */
        'callback'?: string;
        /**
         * When set to `true`, the target document must exist.
         * When set to `false`, the target document must not exist.
         */
        'currentDocument.exists'?: boolean;
        /**
         * When set, the target document must exist and have been last updated at
         * that time.
         */
        'currentDocument.updateTime'?: string;
        /** Selector specifying which fields to include in a partial response. */
        'fields'?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        'key'?: string;
        /**
         * Required. The resource name of the Document to delete. In the format:
         * `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
         */
        'name': string;
        /** OAuth 2.0 token for the current user. */
        'oauth_token'?: string;
        /** Returns response with indentations and line breaks. */
        'prettyPrint'?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        'quotaUser'?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        'upload_protocol'?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        'uploadType'?: string;
      }): Request<{}>;
      /** Gets a single document. */
      get(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        'access_token'?: string;
        /** Data format for response. */
        'alt'?: string;
        /** JSONP */
        'callback'?: string;
        /** Selector specifying which fields to include in a partial response. */
        'fields'?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        'key'?: string;
        /**
         * The list of field paths in the mask. See Document.fields for a field
         * path syntax reference.
         */
        'mask.fieldPaths'?: string | string[];
        /**
         * Required. The resource name of the Document to get. In the format:
         * `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
         */
        'name': string;
        /** OAuth 2.0 token for the current user. */
        'oauth_token'?: string;
        /** Returns response with indentations and line breaks. */
        'prettyPrint'?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        'quotaUser'?: string;
        /**
         * Reads the version of the document at the given time.
         * This may not be older than 270 seconds.
         */
        'readTime'?: string;
        /** Reads the document in a transaction. */
        'transaction'?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        'upload_protocol'?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        'uploadType'?: string;
      }): Request<Document>;
      /** Lists documents. */
      list(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        'access_token'?: string;
        /** Data format for response. */
        'alt'?: string;
        /** JSONP */
        'callback'?: string;
        /**
         * Required. The collection ID, relative to `parent`, to list. For example: `chatrooms`
         * or `messages`.
         */
        'collectionId': string;
        /** Selector specifying which fields to include in a partial response. */
        'fields'?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        'key'?: string;
        /**
         * The list of field paths in the mask. See Document.fields for a field
         * path syntax reference.
         */
        'mask.fieldPaths'?: string | string[];
        /** OAuth 2.0 token for the current user. */
        'oauth_token'?: string;
        /** The order to sort results by. For example: `priority desc, name`. */
        'orderBy'?: string;
        /** The maximum number of documents to return. */
        'pageSize'?: number;
        /** The `next_page_token` value returned from a previous List request, if any. */
        'pageToken'?: string;
        /**
         * Required. The parent resource name. In the format:
         * `projects/{project_id}/databases/{database_id}/documents` or
         * `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
         * For example:
         * `projects/my-project/databases/my-database/documents` or
         * `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`
         */
        'parent': string;
        /** Returns response with indentations and line breaks. */
        'prettyPrint'?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        'quotaUser'?: string;
        /**
         * Reads documents as they were at the given time.
         * This may not be older than 270 seconds.
         */
        'readTime'?: string;
        /**
         * If the list should show missing documents. A missing document is a
         * document that does not exist but has sub-documents. These documents will
         * be returned with a key but will not have fields, Document.create_time,
         * or Document.update_time set.
         *
         * Requests with `show_missing` may not specify `where` or
         * `order_by`.
         */
        'showMissing'?: boolean;
        /** Reads documents in a transaction. */
        'transaction'?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        'upload_protocol'?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        'uploadType'?: string;
      }): Request<ListDocumentsResponse>;
      /** Lists all the collection IDs underneath a document. */
      listCollectionIds(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        'access_token'?: string;
        /** Data format for response. */
        'alt'?: string;
        /** JSONP */
        'callback'?: string;
        /** Selector specifying which fields to include in a partial response. */
        'fields'?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        'key'?: string;
        /** OAuth 2.0 token for the current user. */
        'oauth_token'?: string;
        /**
         * Required. The parent document. In the format:
         * `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
         * For example:
         * `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`
         */
        'parent': string;
        /** Returns response with indentations and line breaks. */
        'prettyPrint'?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        'quotaUser'?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        'upload_protocol'?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        'uploadType'?: string;
        /** Request body */
        'resource': ListCollectionIdsRequest;
      }): Request<ListCollectionIdsResponse>;
      listCollectionIds(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          'access_token'?: string;
          /** Data format for response. */
          'alt'?: string;
          /** JSONP */
          'callback'?: string;
          /** Selector specifying which fields to include in a partial response. */
          'fields'?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          'key'?: string;
          /** OAuth 2.0 token for the current user. */
          'oauth_token'?: string;
          /**
           * Required. The parent document. In the format:
           * `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
           * For example:
           * `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`
           */
          'parent': string;
          /** Returns response with indentations and line breaks. */
          'prettyPrint'?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          'quotaUser'?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          'upload_protocol'?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          'uploadType'?: string;
        },
        body: ListCollectionIdsRequest
      ): Request<ListCollectionIdsResponse>;
      /** Listens to changes. */
      listen(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        'access_token'?: string;
        /** Data format for response. */
        'alt'?: string;
        /** JSONP */
        'callback'?: string;
        /**
         * Required. The database name. In the format:
         * `projects/{project_id}/databases/{database_id}`.
         */
        'database': string;
        /** Selector specifying which fields to include in a partial response. */
        'fields'?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        'key'?: string;
        /** OAuth 2.0 token for the current user. */
        'oauth_token'?: string;
        /** Returns response with indentations and line breaks. */
        'prettyPrint'?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        'quotaUser'?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        'upload_protocol'?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        'uploadType'?: string;
        /** Request body */
        'resource': ListenRequest;
      }): Request<ListenResponse>;
      listen(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          'access_token'?: string;
          /** Data format for response. */
          'alt'?: string;
          /** JSONP */
          'callback'?: string;
          /**
           * Required. The database name. In the format:
           * `projects/{project_id}/databases/{database_id}`.
           */
          'database': string;
          /** Selector specifying which fields to include in a partial response. */
          'fields'?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          'key'?: string;
          /** OAuth 2.0 token for the current user. */
          'oauth_token'?: string;
          /** Returns response with indentations and line breaks. */
          'prettyPrint'?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          'quotaUser'?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          'upload_protocol'?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          'uploadType'?: string;
        },
        body: ListenRequest
      ): Request<ListenResponse>;
      /** Updates or inserts a document. */
      patch(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        'access_token'?: string;
        /** Data format for response. */
        'alt'?: string;
        /** JSONP */
        'callback'?: string;
        /**
         * When set to `true`, the target document must exist.
         * When set to `false`, the target document must not exist.
         */
        'currentDocument.exists'?: boolean;
        /**
         * When set, the target document must exist and have been last updated at
         * that time.
         */
        'currentDocument.updateTime'?: string;
        /** Selector specifying which fields to include in a partial response. */
        'fields'?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        'key'?: string;
        /**
         * The list of field paths in the mask. See Document.fields for a field
         * path syntax reference.
         */
        'mask.fieldPaths'?: string | string[];
        /**
         * The resource name of the document, for example
         * `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
         */
        'name': string;
        /** OAuth 2.0 token for the current user. */
        'oauth_token'?: string;
        /** Returns response with indentations and line breaks. */
        'prettyPrint'?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        'quotaUser'?: string;
        /**
         * The list of field paths in the mask. See Document.fields for a field
         * path syntax reference.
         */
        'updateMask.fieldPaths'?: string | string[];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        'upload_protocol'?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        'uploadType'?: string;
        /** Request body */
        'resource': Document;
      }): Request<Document>;
      patch(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          'access_token'?: string;
          /** Data format for response. */
          'alt'?: string;
          /** JSONP */
          'callback'?: string;
          /**
           * When set to `true`, the target document must exist.
           * When set to `false`, the target document must not exist.
           */
          'currentDocument.exists'?: boolean;
          /**
           * When set, the target document must exist and have been last updated at
           * that time.
           */
          'currentDocument.updateTime'?: string;
          /** Selector specifying which fields to include in a partial response. */
          'fields'?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          'key'?: string;
          /**
           * The list of field paths in the mask. See Document.fields for a field
           * path syntax reference.
           */
          'mask.fieldPaths'?: string | string[];
          /**
           * The resource name of the document, for example
           * `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
           */
          'name': string;
          /** OAuth 2.0 token for the current user. */
          'oauth_token'?: string;
          /** Returns response with indentations and line breaks. */
          'prettyPrint'?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          'quotaUser'?: string;
          /**
           * The list of field paths in the mask. See Document.fields for a field
           * path syntax reference.
           */
          'updateMask.fieldPaths'?: string | string[];
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          'upload_protocol'?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          'uploadType'?: string;
        },
        body: Document
      ): Request<Document>;
      /** Rolls back a transaction. */
      rollback(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        'access_token'?: string;
        /** Data format for response. */
        'alt'?: string;
        /** JSONP */
        'callback'?: string;
        /**
         * Required. The database name. In the format:
         * `projects/{project_id}/databases/{database_id}`.
         */
        'database': string;
        /** Selector specifying which fields to include in a partial response. */
        'fields'?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        'key'?: string;
        /** OAuth 2.0 token for the current user. */
        'oauth_token'?: string;
        /** Returns response with indentations and line breaks. */
        'prettyPrint'?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        'quotaUser'?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        'upload_protocol'?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        'uploadType'?: string;
        /** Request body */
        'resource': RollbackRequest;
      }): Request<{}>;
      rollback(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          'access_token'?: string;
          /** Data format for response. */
          'alt'?: string;
          /** JSONP */
          'callback'?: string;
          /**
           * Required. The database name. In the format:
           * `projects/{project_id}/databases/{database_id}`.
           */
          'database': string;
          /** Selector specifying which fields to include in a partial response. */
          'fields'?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          'key'?: string;
          /** OAuth 2.0 token for the current user. */
          'oauth_token'?: string;
          /** Returns response with indentations and line breaks. */
          'prettyPrint'?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          'quotaUser'?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          'upload_protocol'?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          'uploadType'?: string;
        },
        body: RollbackRequest
      ): Request<{}>;
      /** Runs a query. */
      runQuery(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        'access_token'?: string;
        /** Data format for response. */
        'alt'?: string;
        /** JSONP */
        'callback'?: string;
        /** Selector specifying which fields to include in a partial response. */
        'fields'?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        'key'?: string;
        /** OAuth 2.0 token for the current user. */
        'oauth_token'?: string;
        /**
         * Required. The parent resource name. In the format:
         * `projects/{project_id}/databases/{database_id}/documents` or
         * `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
         * For example:
         * `projects/my-project/databases/my-database/documents` or
         * `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`
         */
        'parent': string;
        /** Returns response with indentations and line breaks. */
        'prettyPrint'?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        'quotaUser'?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        'upload_protocol'?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        'uploadType'?: string;
        /** Request body */
        'resource': RunQueryRequest;
      }): Request<RunQueryResponse>;
      runQuery(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          'access_token'?: string;
          /** Data format for response. */
          'alt'?: string;
          /** JSONP */
          'callback'?: string;
          /** Selector specifying which fields to include in a partial response. */
          'fields'?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          'key'?: string;
          /** OAuth 2.0 token for the current user. */
          'oauth_token'?: string;
          /**
           * Required. The parent resource name. In the format:
           * `projects/{project_id}/databases/{database_id}/documents` or
           * `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
           * For example:
           * `projects/my-project/databases/my-database/documents` or
           * `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`
           */
          'parent': string;
          /** Returns response with indentations and line breaks. */
          'prettyPrint'?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          'quotaUser'?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          'upload_protocol'?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          'uploadType'?: string;
        },
        body: RunQueryRequest
      ): Request<RunQueryResponse>;
      /** Streams batches of document updates and deletes, in order. */
      write(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        'access_token'?: string;
        /** Data format for response. */
        'alt'?: string;
        /** JSONP */
        'callback'?: string;
        /**
         * Required. The database name. In the format:
         * `projects/{project_id}/databases/{database_id}`.
         * This is only required in the first message.
         */
        'database': string;
        /** Selector specifying which fields to include in a partial response. */
        'fields'?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        'key'?: string;
        /** OAuth 2.0 token for the current user. */
        'oauth_token'?: string;
        /** Returns response with indentations and line breaks. */
        'prettyPrint'?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        'quotaUser'?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        'upload_protocol'?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        'uploadType'?: string;
        /** Request body */
        'resource': WriteRequest;
      }): Request<WriteResponse>;
      write(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          'access_token'?: string;
          /** Data format for response. */
          'alt'?: string;
          /** JSONP */
          'callback'?: string;
          /**
           * Required. The database name. In the format:
           * `projects/{project_id}/databases/{database_id}`.
           * This is only required in the first message.
           */
          'database': string;
          /** Selector specifying which fields to include in a partial response. */
          'fields'?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          'key'?: string;
          /** OAuth 2.0 token for the current user. */
          'oauth_token'?: string;
          /** Returns response with indentations and line breaks. */
          'prettyPrint'?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          'quotaUser'?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          'upload_protocol'?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          'uploadType'?: string;
        },
        body: WriteRequest
      ): Request<WriteResponse>;
    }
    interface OperationsResource {
      /**
       * Starts asynchronous cancellation on a long-running operation.  The server
       * makes a best effort to cancel the operation, but success is not
       * guaranteed.  If the server doesn't support this method, it returns
       * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
       * Operations.GetOperation or
       * other methods to check whether the cancellation succeeded or whether the
       * operation completed despite cancellation. On successful cancellation,
       * the operation is not deleted; instead, it becomes an operation with
       * an Operation.error value with a google.rpc.Status.code of 1,
       * corresponding to `Code.CANCELLED`.
       */
      cancel(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        'access_token'?: string;
        /** Data format for response. */
        'alt'?: string;
        /** JSONP */
        'callback'?: string;
        /** Selector specifying which fields to include in a partial response. */
        'fields'?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        'key'?: string;
        /** The name of the operation resource to be cancelled. */
        'name': string;
        /** OAuth 2.0 token for the current user. */
        'oauth_token'?: string;
        /** Returns response with indentations and line breaks. */
        'prettyPrint'?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        'quotaUser'?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        'upload_protocol'?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        'uploadType'?: string;
        /** Request body */
        'resource': GoogleLongrunningCancelOperationRequest;
      }): Request<{}>;
      cancel(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          'access_token'?: string;
          /** Data format for response. */
          'alt'?: string;
          /** JSONP */
          'callback'?: string;
          /** Selector specifying which fields to include in a partial response. */
          'fields'?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          'key'?: string;
          /** The name of the operation resource to be cancelled. */
          'name': string;
          /** OAuth 2.0 token for the current user. */
          'oauth_token'?: string;
          /** Returns response with indentations and line breaks. */
          'prettyPrint'?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          'quotaUser'?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          'upload_protocol'?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          'uploadType'?: string;
        },
        body: GoogleLongrunningCancelOperationRequest
      ): Request<{}>;
      /**
       * Deletes a long-running operation. This method indicates that the client is
       * no longer interested in the operation result. It does not cancel the
       * operation. If the server doesn't support this method, it returns
       * `google.rpc.Code.UNIMPLEMENTED`.
       */
      delete(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        'access_token'?: string;
        /** Data format for response. */
        'alt'?: string;
        /** JSONP */
        'callback'?: string;
        /** Selector specifying which fields to include in a partial response. */
        'fields'?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        'key'?: string;
        /** The name of the operation resource to be deleted. */
        'name': string;
        /** OAuth 2.0 token for the current user. */
        'oauth_token'?: string;
        /** Returns response with indentations and line breaks. */
        'prettyPrint'?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        'quotaUser'?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        'upload_protocol'?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        'uploadType'?: string;
      }): Request<{}>;
      /**
       * Gets the latest state of a long-running operation.  Clients can use this
       * method to poll the operation result at intervals as recommended by the API
       * service.
       */
      get(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        'access_token'?: string;
        /** Data format for response. */
        'alt'?: string;
        /** JSONP */
        'callback'?: string;
        /** Selector specifying which fields to include in a partial response. */
        'fields'?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        'key'?: string;
        /** The name of the operation resource. */
        'name': string;
        /** OAuth 2.0 token for the current user. */
        'oauth_token'?: string;
        /** Returns response with indentations and line breaks. */
        'prettyPrint'?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        'quotaUser'?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        'upload_protocol'?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        'uploadType'?: string;
      }): Request<GoogleLongrunningOperation>;
      /**
       * Lists operations that match the specified filter in the request. If the
       * server doesn't support this method, it returns `UNIMPLEMENTED`.
       *
       * NOTE: the `name` binding allows API services to override the binding
       * to use different resource name schemes, such as `users/&#42;/operations`. To
       * override the binding, API services can add a binding such as
       * `"/v1/{name=users/&#42;}/operations"` to their service configuration.
       * For backwards compatibility, the default name includes the operations
       * collection id, however overriding users must ensure the name binding
       * is the parent resource, without the operations collection id.
       */
      list(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        'access_token'?: string;
        /** Data format for response. */
        'alt'?: string;
        /** JSONP */
        'callback'?: string;
        /** Selector specifying which fields to include in a partial response. */
        'fields'?: string;
        /** The standard list filter. */
        'filter'?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        'key'?: string;
        /** The name of the operation's parent resource. */
        'name': string;
        /** OAuth 2.0 token for the current user. */
        'oauth_token'?: string;
        /** The standard list page size. */
        'pageSize'?: number;
        /** The standard list page token. */
        'pageToken'?: string;
        /** Returns response with indentations and line breaks. */
        'prettyPrint'?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        'quotaUser'?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        'upload_protocol'?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        'uploadType'?: string;
      }): Request<GoogleLongrunningListOperationsResponse>;
    }
    interface DatabasesResource {
      /**
       * Exports a copy of all or a subset of documents from Google Cloud Firestore
       * to another storage system, such as Google Cloud Storage. Recent updates to
       * documents may not be reflected in the export. The export occurs in the
       * background and its progress can be monitored and managed via the
       * Operation resource that is created. The output of an export may only be
       * used once the associated operation is done. If an export operation is
       * cancelled before completion it may leave partial data behind in Google
       * Cloud Storage.
       */
      exportDocuments(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        'access_token'?: string;
        /** Data format for response. */
        'alt'?: string;
        /** JSONP */
        'callback'?: string;
        /** Selector specifying which fields to include in a partial response. */
        'fields'?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        'key'?: string;
        /**
         * Required. Database to export. Should be of the form:
         * `projects/{project_id}/databases/{database_id}`.
         */
        'name': string;
        /** OAuth 2.0 token for the current user. */
        'oauth_token'?: string;
        /** Returns response with indentations and line breaks. */
        'prettyPrint'?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        'quotaUser'?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        'upload_protocol'?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        'uploadType'?: string;
        /** Request body */
        'resource': GoogleFirestoreAdminV1ExportDocumentsRequest;
      }): Request<GoogleLongrunningOperation>;
      exportDocuments(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          'access_token'?: string;
          /** Data format for response. */
          'alt'?: string;
          /** JSONP */
          'callback'?: string;
          /** Selector specifying which fields to include in a partial response. */
          'fields'?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          'key'?: string;
          /**
           * Required. Database to export. Should be of the form:
           * `projects/{project_id}/databases/{database_id}`.
           */
          'name': string;
          /** OAuth 2.0 token for the current user. */
          'oauth_token'?: string;
          /** Returns response with indentations and line breaks. */
          'prettyPrint'?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          'quotaUser'?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          'upload_protocol'?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          'uploadType'?: string;
        },
        body: GoogleFirestoreAdminV1ExportDocumentsRequest
      ): Request<GoogleLongrunningOperation>;
      /**
       * Imports documents into Google Cloud Firestore. Existing documents with the
       * same name are overwritten. The import occurs in the background and its
       * progress can be monitored and managed via the Operation resource that is
       * created. If an ImportDocuments operation is cancelled, it is possible
       * that a subset of the data has already been imported to Cloud Firestore.
       */
      importDocuments(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        'access_token'?: string;
        /** Data format for response. */
        'alt'?: string;
        /** JSONP */
        'callback'?: string;
        /** Selector specifying which fields to include in a partial response. */
        'fields'?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        'key'?: string;
        /**
         * Required. Database to import into. Should be of the form:
         * `projects/{project_id}/databases/{database_id}`.
         */
        'name': string;
        /** OAuth 2.0 token for the current user. */
        'oauth_token'?: string;
        /** Returns response with indentations and line breaks. */
        'prettyPrint'?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        'quotaUser'?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        'upload_protocol'?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        'uploadType'?: string;
        /** Request body */
        'resource': GoogleFirestoreAdminV1ImportDocumentsRequest;
      }): Request<GoogleLongrunningOperation>;
      importDocuments(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          'access_token'?: string;
          /** Data format for response. */
          'alt'?: string;
          /** JSONP */
          'callback'?: string;
          /** Selector specifying which fields to include in a partial response. */
          'fields'?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          'key'?: string;
          /**
           * Required. Database to import into. Should be of the form:
           * `projects/{project_id}/databases/{database_id}`.
           */
          'name': string;
          /** OAuth 2.0 token for the current user. */
          'oauth_token'?: string;
          /** Returns response with indentations and line breaks. */
          'prettyPrint'?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          'quotaUser'?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          'upload_protocol'?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          'uploadType'?: string;
        },
        body: GoogleFirestoreAdminV1ImportDocumentsRequest
      ): Request<GoogleLongrunningOperation>;
      collectionGroups: CollectionGroupsResource;
      documents: DocumentsResource;
      operations: OperationsResource;
    }
    interface LocationsResource {
      /** Gets information about a location. */
      get(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        'access_token'?: string;
        /** Data format for response. */
        'alt'?: string;
        /** JSONP */
        'callback'?: string;
        /** Selector specifying which fields to include in a partial response. */
        'fields'?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        'key'?: string;
        /** Resource name for the location. */
        'name': string;
        /** OAuth 2.0 token for the current user. */
        'oauth_token'?: string;
        /** Returns response with indentations and line breaks. */
        'prettyPrint'?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        'quotaUser'?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        'upload_protocol'?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        'uploadType'?: string;
      }): Request<Location>;
      /** Lists information about the supported locations for this service. */
      list(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        'access_token'?: string;
        /** Data format for response. */
        'alt'?: string;
        /** JSONP */
        'callback'?: string;
        /** Selector specifying which fields to include in a partial response. */
        'fields'?: string;
        /** The standard list filter. */
        'filter'?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        'key'?: string;
        /** The resource that owns the locations collection, if applicable. */
        'name': string;
        /** OAuth 2.0 token for the current user. */
        'oauth_token'?: string;
        /** The standard list page size. */
        'pageSize'?: number;
        /** The standard list page token. */
        'pageToken'?: string;
        /** Returns response with indentations and line breaks. */
        'prettyPrint'?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        'quotaUser'?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        'upload_protocol'?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        'uploadType'?: string;
      }): Request<ListLocationsResponse>;
    }
    interface ProjectsResource {
      databases: DatabasesResource;
      locations: LocationsResource;
    }

    const projects: ProjectsResource;
  }
}
